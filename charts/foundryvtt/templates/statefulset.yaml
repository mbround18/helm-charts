apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "foundryvtt.fullname" . }}
  labels:
    {{- include "foundryvtt.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "foundryvtt.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  {{- with .Values.updateStrategy }}
  updateStrategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "foundryvtt.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "foundryvtt.selectorLabels" . | nindent 8 }}
        {{- with .Values.commonLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "foundryvtt.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
        fsGroupChangePolicy: {{ .Values.podSecurityContext.fsGroupChangePolicy | quote }}
        seccompProfile:
          type: {{ .Values.podSecurityContext.seccompProfile.type }}
      {{- end }}
      initContainers:
        - name: foundry-init
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          command: ["sh", "-c", "chown -R 1000:1000 /foundrydata /foundryvtt"]
          volumeMounts:
            - name: app
              mountPath: /foundryvtt
            - name: core
              mountPath: /foundrydata
            - name: backups
              mountPath: /foundrydata/Backups
            - name: config
              mountPath: /foundrydata/Config
            - name: data
              mountPath: /foundrydata/Data
          {{- /* If you want to auto-chown extra volumes, you could loop over them similarly. */}}

      containers:
        ########################################################
        # Main Foundry Container
        ########################################################
        - name: foundryvtt
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          ports:
            - name: web
              containerPort: 4444
          env:
            - name: HOSTNAME
              value: {{ .Values.network.host | quote }}
            - name: SSL_PROXY
              value: {{ .Values.sslProxy | quote }}
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: web
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: web
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          {{- end }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
            allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
            capabilities:
              drop: {{ toYaml .Values.securityContext.capabilities.drop | nindent 14 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: app
              mountPath: /foundryvtt
            - name: core
              mountPath: /foundrydata
            - name: backups
              mountPath: /foundrydata/Backups
            - name: config
              mountPath: /foundrydata/Config
            - name: data
              mountPath: /foundrydata/Data
          {{- if and .Values.securityContext.enabled .Values.securityContext.readOnlyRootFilesystem }}
            - name: tmp
              mountPath: /tmp
          {{- end }}
          {{- if .Values.extraVolumeClaimTemplates }}
          {{- range .Values.extraVolumeClaimTemplates }}
          {{- if .enabled }}
            - name: {{ .name }}
              mountPath: /foundrydata/{{ .name }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- /*
              If you want to mount extra volumes (like "cache", "custom-logs") in the main container too:
              For example:
              - name: cache
                mountPath: /foundrydata/cache
          */}}

        ########################################################
        # Extra Containers
        ########################################################
        {{- range .Values.extraContainers }}
        - name: {{ .name }}
          image: {{ .image | quote }}
          {{- if .command }}
          command: {{ toYaml .command | nindent 10 }}
          {{- end }}
          {{- if .args }}
          args: {{ toYaml .args | nindent 10 }}
          {{- end }}
          {{- if .env }}
          env:
          {{- range .env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- end }}
          {{- if .volumeMounts }}
          volumeMounts:
          {{- range .volumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
          {{- end }}
          {{- end }}
        {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if and .Values.securityContext.enabled .Values.securityContext.readOnlyRootFilesystem }}
      volumes:
        - name: tmp
          emptyDir: {}
      {{- end }}

  ########################################################
  # volumeClaimTemplates for Foundry's core volumes
  ########################################################
  volumeClaimTemplates:
    {{- if .Values.volumeClaimTemplates.app.enabled }}
    - metadata:
        name: app
      spec:
        storageClassName: {{ .Values.volumeClaimTemplates.app.storageClassName | quote }}
        accessModes: {{ toYaml .Values.volumeClaimTemplates.app.accessModes | nindent 8 }}
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.app.size }}
    {{- end }}
    {{- if .Values.volumeClaimTemplates.core.enabled }}
    - metadata:
        name: core
      spec:
        storageClassName: {{ .Values.volumeClaimTemplates.core.storageClassName | quote }}
        accessModes: {{ toYaml .Values.volumeClaimTemplates.core.accessModes | nindent 8 }}
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.core.size }}
    {{- end }}
    {{- if .Values.volumeClaimTemplates.backups.enabled }}
    - metadata:
        name: backups
      spec:
        storageClassName: {{ .Values.volumeClaimTemplates.backups.storageClassName | quote }}
        accessModes: {{ toYaml .Values.volumeClaimTemplates.backups.accessModes | nindent 8 }}
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.backups.size }}
    {{- end }}
    {{- if .Values.volumeClaimTemplates.config.enabled }}
    - metadata:
        name: config
      spec:
        storageClassName: {{ .Values.volumeClaimTemplates.config.storageClassName | quote }}
        accessModes: {{ toYaml .Values.volumeClaimTemplates.config.accessModes | nindent 8 }}
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.config.size }}
    {{- end }}
    {{- if .Values.volumeClaimTemplates.data.enabled }}
    - metadata:
        name: data
      spec:
        storageClassName: {{ .Values.volumeClaimTemplates.data.storageClassName | quote }}
        accessModes: {{ toYaml .Values.volumeClaimTemplates.data.accessModes | nindent 8 }}
        resources:
          requests:
            storage: {{ .Values.volumeClaimTemplates.data.size }}
    {{- end }}

    ########################################################
    # Additional "extraVolumeClaimTemplates" in a loop
    ########################################################
    {{- range .Values.extraVolumeClaimTemplates }}
    {{- if .enabled }}
    - metadata:
        name: {{ .name }}
      spec:
        storageClassName: {{ .storageClassName | quote }}
        accessModes: {{ toYaml .accessModes | nindent 8 }}
        resources:
          requests:
            storage: {{ .size }}
    {{- end }}
    {{- end }}
